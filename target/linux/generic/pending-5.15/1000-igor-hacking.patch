--- a/drivers/net/wireguard/socket.c
+++ b/drivers/net/wireguard/socket.c
@@ -27,6 +27,7 @@ static int send4(struct wg_device *wg, s
 		.flowi4_mark = wg->fwmark,
 		.flowi4_proto = IPPROTO_UDP
 	};
+	printk(KERN_INFO "wgdbg[0]: send4 fl: saddr=%pI4, daddr=%pI4\n", &fl.saddr, &fl.daddr);
 	struct rtable *rt = NULL;
 	struct sock *sock;
 	int ret = 0;
@@ -48,10 +49,15 @@ static int send4(struct wg_device *wg, s
 	if (cache)
 		rt = dst_cache_get_ip4(cache, &fl.saddr);
 
+	if (rt) {
+		printk(KERN_INFO "wgdbg[1]: rt cached");
+	}
+
 	if (!rt) {
 		security_sk_classify_flow(sock, flowi4_to_flowi_common(&fl));
 		if (unlikely(!inet_confirm_addr(sock_net(sock), NULL, 0,
 						fl.saddr, RT_SCOPE_HOST))) {
+			printk(KERN_INFO "wgdbg[2]: inet_confirm_addr returned 0, setting fl.saddr=0");
 			endpoint->src4.s_addr = 0;
 			endpoint->src_if4 = 0;
 			fl.saddr = 0;
@@ -64,6 +70,7 @@ static int send4(struct wg_device *wg, s
 			     rt->dst.dev->ifindex != endpoint->src_if4)))) {
 			endpoint->src4.s_addr = 0;
 			endpoint->src_if4 = 0;
+			printk(KERN_INFO "wgdbg[3]: setting fl.saddr=0");
 			fl.saddr = 0;
 			if (cache)
 				dst_cache_reset(cache);
@@ -82,6 +89,7 @@ static int send4(struct wg_device *wg, s
 	}
 
 	skb->ignore_df = 1;
+	printk(KERN_INFO "wgdbg[4]: udp_tunnel_xmit_skb, fl.saddr=%pI4, fl.daddr=%pI4", &fl.saddr, &fl.daddr);
 	udp_tunnel_xmit_skb(rt, sock, skb, fl.saddr, fl.daddr, ds,
 			    ip4_dst_hoplimit(&rt->dst), 0, fl.fl4_sport,
 			    fl.fl4_dport, false, false);
